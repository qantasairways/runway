// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DayPicker renderButtonDates() renders correctly when start and end dates are selected 1`] = `
.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  overflow: hidden;
  max-width: 100%;
}

.emotion-0 {
  font-size: 2.25rem;
  margin: 0 12px 20px 12px;
}

<div
  className="emotion-1"
>
  <ButtonContent
    largeButtonValue="21"
    smallButtonValue="Apr, 2019"
  />
  <div
    className="emotion-0"
  >
    -
  </div>
  <ButtonContent
    largeButtonValue="01"
    smallButtonValue="May, 2019"
  />
</div>
`;

exports[`DayPicker renderButtonDates() renders correctly when start date is selected 1`] = `
.emotion-0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  overflow: hidden;
  max-width: 100%;
}

<div
  className="emotion-0"
>
  <ButtonContent
    largeButtonValue="21"
    smallButtonValue="Apr, 2019"
  />
</div>
`;

exports[`DayPicker renderHeader() renders correctly 1`] = `
.emotion-10 {
  z-index: 1;
}

.emotion-5 {
  font-weight: 700;
  background: #323232;
  color: #fff;
}

.emotion-4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  max-width: 1030px;
  margin: 0 auto;
  padding: 0 0 0 15px;
}

.emotion-0 {
  display: none;
  width: 126px;
}

@media only screen and (min-width:768px) {
  .emotion-0 {
    display: block;
  }
}

.emotion-1 {
  font-size: 1.125rem;
  line-height: 0;
}

@media only screen and (min-width:768px) {
  .emotion-1 {
    padding-right: 71px;
    font-size: 1.375rem;
  }
}

.emotion-3 {
  height: 48px;
  width: 48px;
  padding: 0;
  line-height: 0;
  background: none;
  border: none;
  cursor: pointer;
}

@media only screen and (min-width:768px) {
  .emotion-3 {
    height: 55px;
    width: 55px;
  }
}

.emotion-2 {
  fill: white;
}

.emotion-9 {
  background: #fafafa;
}

.emotion-8 {
  display: grid;
  grid-template-columns: repeat(7,1fr);
  grid-gap: 1px;
  max-width: 1000px;
  margin: 1px auto 0 auto;
  padding: 0 1px;
  width: 100%;
  height: 30px;
  font-size: 0.875rem;
  line-height: 0.875rem;
  text-align: center;
  box-shadow: 0 1px 1px 0 rgba(0,0,0,0.08),0 0 1px 0 rgba(0,0,0,0.04);
}

@media only screen and (min-width:768px) {
  .emotion-8 {
    height: 40px;
  }
}

.emotion-6 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  position: relative;
}

.emotion-6::after {
  content: "";
  position: absolute;
  right: -1px;
  height: 15px;
  border-left: 1px solid #eeeeee;
}

.emotion-6::after:last-child {
  border-left: none;
}

.emotion-6 undefined {
  font-size: 1.125rem;
}

<div
  className="emotion-10"
>
  <div
    className="emotion-5"
  >
    <div
      className="emotion-4"
    >
      <QantasLogo
        className="emotion-0"
      />
      <span
        className="emotion-1"
      >
        header label
      </span>
      <button
        aria-label="Close aria label"
        className="emotion-3"
        onClick={[Function]}
        onKeyDown={[Function]}
        type="button"
      >
        <CrossIcon
          className="emotion-2"
          height="32px"
          width="32px"
        />
      </button>
    </div>
  </div>
  <Tabs
    Icon={[Function]}
    endDate="Wed May 01 2019"
    endPlaceholder="return when?"
    endSelectedLabel="Return MEL"
    isDateRange={false}
    isSelectingStartDate={true}
    startDate="Sun Apr 21 2019"
    startPlaceholder="depart when?"
    startSelectedLabel="Depart SYD"
  />
  <div
    className="emotion-9"
  >
    <div
      className="emotion-8"
    >
      <div
        className="emotion-6"
        key="Mon"
      >
        Mon
      </div>
      <div
        className="emotion-6"
        key="Tue"
      >
        Tue
      </div>
    </div>
  </div>
</div>
`;

exports[`DayPicker renders DayPicker with props provided 1`] = `
<ButtonWithDialog
  Icon={[Function]}
  buttonLabel="Label"
  closeAriaLabel="Close aria label"
  closeOnBlur={false}
  dialogAriaLabel="dialog aria label. null"
  dialogStyles={
    Object {
      "background": "white",
      "boxSizing": "border-box",
      "display": "flex",
      "flexDirection": "column",
      "fontFamily": "\\"Ciutadella\\", sans-serif",
      "height": "100%",
      "label": "runway__dialog",
      "left": 0,
      "position": "fixed",
      "top": "100%",
      "transition": "transform 300ms ease-in-out",
      "width": "100%",
      "zIndex": 1000,
    }
  }
  hasDialogDimensions={false}
  onBeforeClose={[Function]}
  onBlur={[Function]}
  onClose={[Function]}
  onOpen={[Function]}
  placeHolder="Placeholder"
  renderButtonValue={[Function]}
  renderFooter={[Function]}
  renderHeader={[Function]}
  shouldAddScrollLockClass={false}
  transitionStyles={
    Object {
      "entered": Object {
        "transform": "translateY(-100%)",
      },
      "entering": Object {
        "transform": "translateY(0)",
      },
      "exiting": Object {
        "transform": "translateY(0)",
      },
    }
  }
>
  <Component />
</ButtonWithDialog>
`;

exports[`DayPicker renders correctly with defaults 1`] = `
<ButtonWithDialog
  Icon={[Function]}
  buttonLabel="When"
  closeAriaLabel="Close dialog"
  closeOnBlur={false}
  dialogAriaLabel="Select dates. null"
  dialogStyles={
    Object {
      "background": "white",
      "boxSizing": "border-box",
      "display": "flex",
      "flexDirection": "column",
      "fontFamily": "\\"Ciutadella\\", sans-serif",
      "height": "100%",
      "label": "runway__dialog",
      "left": 0,
      "position": "fixed",
      "top": "100%",
      "transition": "transform 300ms ease-in-out",
      "width": "100%",
      "zIndex": 1000,
    }
  }
  hasDialogDimensions={false}
  onBeforeClose={[Function]}
  onBlur={[Function]}
  onClose={[Function]}
  onOpen={[Function]}
  placeHolder="When?"
  renderButtonValue={[Function]}
  renderFooter={[Function]}
  renderHeader={[Function]}
  shouldAddScrollLockClass={false}
  transitionStyles={
    Object {
      "entered": Object {
        "transform": "translateY(-100%)",
      },
      "entering": Object {
        "transform": "translateY(0)",
      },
      "exiting": Object {
        "transform": "translateY(0)",
      },
    }
  }
>
  <Component />
</ButtonWithDialog>
`;
