// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Calendar renderDay() renders correctly 1`] = `
.emotion-1 {
  cursor: pointer;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  position: relative;
  padding-top: 38px;
  box-sizing: border-box;
  height: 94px;
  color: #323232;
  background: #fff;
  box-shadow: 0 0 0 1px #eaeaea;
}

.emotion-0 {
  height: 1.125rem;
  padding: 0 4px;
  font-size: 1.125rem;
  line-height: 1.1;
  border-radius: 4px;
  background-color: #bff4f2;
}

<div
  aria-label=", "
  className="emotion-1"
>
  <div
    className="emotion-0"
  >
    21
  </div>
</div>
`;

exports[`Calendar renderMonthCaption() renders correctly 1`] = `
.emotion-2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  height: 58px;
}

.emotion-0 {
  font-family: "Ciutadella-Md",sans-serif;
  font-size: 1.375rem;
  margin-right: 5px;
}

.emotion-1 {
  font-size: 1.125rem;
  font-family: "Ciutadella",sans-serif;
}

<div
  className="emotion-2"
  data-date={2019-04-20T14:00:00.000Z}
>
  <span
    className="emotion-0"
  />
  <span
    className="emotion-1"
  >
    2019
  </span>
</div>
`;

exports[`Calendar renders correctly with defaults 1`] = `
<DayPicker
  canChangeMonth={false}
  captionElement={[Function]}
  classNames={
    Object {
      "body": "runway-calendar__body",
      "day": "css-76tx06",
      "disabled": "disabled",
      "month": "css-14fkfuc",
      "outside": "outside",
      "selected": "selected",
      "today": "today",
      "week": "css-0",
    }
  }
  disabledDays={
    Object {
      "after": null,
      "before": null,
    }
  }
  enableOutsideDaysClick={true}
  firstDayOfWeek={0}
  fixedWeeks={false}
  initialMonth={2019-04-20T14:00:00.000Z}
  labels={
    Object {
      "nextMonth": "Next Month",
      "previousMonth": "Previous Month",
    }
  }
  locale="en"
  localeUtils={
    Object {
      "default": Object {
        "formatDay": [Function],
        "formatMonthTitle": [Function],
        "formatWeekdayLong": [Function],
        "formatWeekdayShort": [Function],
        "getFirstDayOfWeek": [Function],
        "getMonths": [Function],
      },
      "formatDay": [Function],
      "formatMonthTitle": [Function],
      "formatWeekdayLong": [Function],
      "formatWeekdayShort": [Function],
      "getFirstDayOfWeek": [Function],
      "getMonths": [Function],
    }
  }
  modifiers={
    Object {
      "end": null,
      "focusElement": 2019-04-20T14:00:00.000Z,
      "hidden": Object {
        "before": null,
      },
      "start": null,
    }
  }
  modifiersStyles={
    Object {
      "hidden": Object {
        "display": "none",
      },
    }
  }
  navbarElement={
    <Navbar
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "months": "DayPicker-Months",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
      dir="ltr"
      labels={
        Object {
          "nextMonth": "Next Month",
          "previousMonth": "Previous Month",
        }
      }
      showNextButton={true}
      showPreviousButton={true}
    />
  }
  numberOfMonths={1}
  onDayClick={[Function]}
  pagedNavigation={false}
  renderDay={[Function]}
  renderWeek={[Function]}
  reverseMonths={false}
  selectedDays={
    Object {
      "from": null,
      "to": null,
    }
  }
  showOutsideDays={false}
  showWeekDays={false}
  showWeekNumbers={false}
  tabIndex={0}
  weekdayElement={<Weekday />}
/>
`;

exports[`Calendar renders correctly with props provided 1`] = `
<DayPicker
  canChangeMonth={false}
  captionElement={[Function]}
  classNames={
    Object {
      "body": "runway-calendar__body",
      "day": "css-76tx06",
      "disabled": "disabled",
      "month": "css-14fkfuc",
      "outside": "outside",
      "selected": "selected",
      "today": "today",
      "week": "css-0",
    }
  }
  disabledDays={
    Object {
      "after": 2019-05-20T14:00:00.000Z,
      "before": 2019-04-09T14:00:00.000Z,
    }
  }
  enableOutsideDaysClick={true}
  firstDayOfWeek={4}
  fixedWeeks={false}
  initialMonth={2019-04-20T14:00:00.000Z}
  labels={
    Object {
      "nextMonth": "Next Month",
      "previousMonth": "Previous Month",
    }
  }
  locale="en"
  localeUtils={
    Object {
      "default": Object {
        "formatDay": [Function],
        "formatMonthTitle": [Function],
        "formatWeekdayLong": [Function],
        "formatWeekdayShort": [Function],
        "getFirstDayOfWeek": [Function],
        "getMonths": [Function],
      },
      "formatDay": [Function],
      "formatMonthTitle": [Function],
      "formatWeekdayLong": [Function],
      "formatWeekdayShort": [Function],
      "getFirstDayOfWeek": [Function],
      "getMonths": [Function],
    }
  }
  modifiers={
    Object {
      "end": 2019-04-23T14:00:00.000Z,
      "focusElement": 2019-04-20T14:00:00.000Z,
      "hidden": Object {
        "before": 2019-04-07T14:00:00.000Z,
      },
      "start": 2019-04-20T14:00:00.000Z,
    }
  }
  modifiersStyles={
    Object {
      "hidden": Object {
        "display": "none",
      },
    }
  }
  navbarElement={
    <Navbar
      classNames={
        Object {
          "body": "DayPicker-Body",
          "caption": "DayPicker-Caption",
          "container": "DayPicker",
          "day": "DayPicker-Day",
          "disabled": "disabled",
          "footer": "DayPicker-Footer",
          "interactionDisabled": "DayPicker--interactionDisabled",
          "month": "DayPicker-Month",
          "months": "DayPicker-Months",
          "navBar": "DayPicker-NavBar",
          "navButtonInteractionDisabled": "DayPicker-NavButton--interactionDisabled",
          "navButtonNext": "DayPicker-NavButton DayPicker-NavButton--next",
          "navButtonPrev": "DayPicker-NavButton DayPicker-NavButton--prev",
          "outside": "outside",
          "selected": "selected",
          "today": "today",
          "todayButton": "DayPicker-TodayButton",
          "week": "DayPicker-Week",
          "weekNumber": "DayPicker-WeekNumber",
          "weekday": "DayPicker-Weekday",
          "weekdays": "DayPicker-Weekdays",
          "weekdaysRow": "DayPicker-WeekdaysRow",
          "wrapper": "DayPicker-wrapper",
        }
      }
      dir="ltr"
      labels={
        Object {
          "nextMonth": "Next Month",
          "previousMonth": "Previous Month",
        }
      }
      showNextButton={true}
      showPreviousButton={true}
    />
  }
  numberOfMonths={6}
  onDayClick={[Function]}
  pagedNavigation={false}
  renderDay={[Function]}
  renderWeek={[Function]}
  reverseMonths={false}
  selectedDays={
    Object {
      "from": 2019-04-20T14:00:00.000Z,
      "to": 2019-04-23T14:00:00.000Z,
    }
  }
  showOutsideDays={false}
  showWeekDays={false}
  showWeekNumbers={false}
  tabIndex={0}
  weekdayElement={<Weekday />}
/>
`;
