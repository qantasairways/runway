// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Select renders correctly with defaults 1`] = `
.emotion-5 {
  color: #fff;
  position: relative;
  width: 100%;
  height: 100%;
  max-width: 100%;
}

.emotion-4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  position: relative;
  cursor: pointer;
  padding: 0;
  border: 0;
  background: transparent;
  color: inherit;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  vertical-align: middle;
  max-width: 100%;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  padding: 0 15px;
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.56;
  background: #3c3c3c;
  color: #fff;
  -webkit-text-decoration: none;
  text-decoration: none;
  width: 100%;
  height: 100%;
}

.emotion-0 {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.emotion-1 {
  width: 24px;
  height: 100%;
  fill: #fff;
  vertical-align: middle;
  padding: 0;
}

<Select
  ariaLabel=""
  downShiftProps={
    Object {
      "itemToString": [Function],
    }
  }
  growMenu={false}
  height="100%"
  highlighted={false}
  inline={false}
  items={Array []}
  menuWidth={null}
  onChange={null}
  renderItem={[Function]}
>
  <Downshift
    defaultHighlightedIndex={null}
    defaultIsOpen={false}
    environment={[Window]}
    getA11yStatusMessage={[Function]}
    itemToString={[Function]}
    onChange={[Function]}
    onInputValueChange={[Function]}
    onOuterClick={[Function]}
    onSelect={[Function]}
    onStateChange={[Function]}
    onUserAction={[Function]}
    scrollIntoView={[Function]}
    selectedItemChanged={[Function]}
    stateReducer={[Function]}
    suppressRefError={false}
  >
    <div
      aria-expanded={false}
      aria-haspopup="listbox"
      aria-labelledby="downshift-0-label"
      aria-owns={null}
      className="emotion-5"
      role="combobox"
    >
      <SelectOnKeyPressContainer
        downshiftProps={
          Object {
            "clearItems": [Function],
            "clearSelection": [Function],
            "closeMenu": [Function],
            "getInputProps": [Function],
            "getItemProps": [Function],
            "getLabelProps": [Function],
            "getMenuProps": [Function],
            "getRootProps": [Function],
            "getToggleButtonProps": [Function],
            "highlightedIndex": null,
            "id": "downshift-0",
            "inputValue": "",
            "isOpen": false,
            "itemToString": [Function],
            "openMenu": [Function],
            "reset": [Function],
            "selectHighlightedItem": [Function],
            "selectItem": [Function],
            "selectItemAtIndex": [Function],
            "selectedItem": null,
            "setHighlightedIndex": [Function],
            "setItemCount": [Function],
            "setState": [Function],
            "toggleMenu": [Function],
            "unsetItemCount": [Function],
          }
        }
        focus={false}
        itemToString={[Function]}
        items={Array []}
      >
        <DropdownMenu
          ariaLabel=""
          downShiftProps={
            Object {
              "itemToString": [Function],
            }
          }
          downshiftProps={
            Object {
              "clearItems": [Function],
              "clearSelection": [Function],
              "closeMenu": [Function],
              "getInputProps": [Function],
              "getItemProps": [Function],
              "getLabelProps": [Function],
              "getMenuProps": [Function],
              "getRootProps": [Function],
              "getToggleButtonProps": [Function],
              "highlightedIndex": null,
              "id": "downshift-0",
              "inputValue": "",
              "isOpen": false,
              "itemToString": [Function],
              "openMenu": [Function],
              "reset": [Function],
              "selectHighlightedItem": [Function],
              "selectItem": [Function],
              "selectItemAtIndex": [Function],
              "selectedItem": null,
              "setHighlightedIndex": [Function],
              "setItemCount": [Function],
              "setState": [Function],
              "toggleMenu": [Function],
              "unsetItemCount": [Function],
            }
          }
          growMenu={false}
          height="100%"
          highlighted={false}
          inline={false}
          items={Array []}
          label=""
          menuWidth={null}
          onChange={null}
          renderItem={[Function]}
        >
          <ButtonBase
            aria-activedescendant={null}
            aria-expanded={false}
            aria-haspopup="listbox"
            aria-label={null}
            aria-labelledby="downshift-0-label"
            aria-owns={null}
            data-toggle={true}
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            overrideClassName={
              Object {
                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "name": "1gwel7j-DropdownMenu-DropdownMenu",
                "next": undefined,
                "styles": "justify-content:space-between;padding:0 15px;font-size:1rem;font-weight:400;line-height:1.56;background:#3c3c3c;color:#fff;text-decoration:none;width:100%;height:100%;;;label:DropdownMenu;;label:DropdownMenu;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "toString": [Function],
              }
            }
            role="combobox"
            type="button"
          >
            <button
              aria-activedescendant={null}
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-label={null}
              aria-labelledby="downshift-0-label"
              aria-owns={null}
              className="emotion-4"
              data-toggle={true}
              onBlur={[Function]}
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="emotion-0"
              />
              <span
                className="emotion-1"
              >
                <ChevronDown
                  className="emotion-1"
                  height="24"
                  width="24"
                >
                  <svg
                    className="emotion-1"
                    height="24"
                    viewBox="0 0 24 24"
                    width="24"
                    xmlns="http://www.w3.org/2000/svg"
                    xmlnsXlink="http://www.w3.org/1999/xlink"
                  >
                    <defs>
                      <path
                        d="M2.12 1.29L6 5.17l3.88-3.88a.996.996 0 1 1 1.41 1.41L6.7 7.29a.996.996 0 0 1-1.41 0L.7 2.7a.996.996 0 0 1 0-1.41c.39-.38 1.03-.39 1.42 0z"
                        id="mockId"
                      />
                    </defs>
                    <g
                      fillRule="evenodd"
                      transform="translate(6 8)"
                    >
                      <mask
                        id="mockId"
                      >
                        <use
                          xlinkHref="#mockId"
                        />
                      </mask>
                      <use
                        fillRule="nonzero"
                        xlinkHref="#mockId"
                      />
                      <g
                        mask="url(#mockId)"
                      >
                        <path
                          d="M0 0h12v8H0z"
                        />
                      </g>
                    </g>
                  </svg>
                </ChevronDown>
              </span>
            </button>
          </ButtonBase>
        </DropdownMenu>
      </SelectOnKeyPressContainer>
    </div>
  </Downshift>
</Select>
`;

exports[`Select renders correctly with props provided 1`] = `
.emotion-0 {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.emotion-5 {
  color: #8de2e0;
  position: static;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  height: 20px;
  max-width: 100%;
}

.emotion-4 {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  position: relative;
  cursor: pointer;
  padding: 0;
  border: 0;
  background: transparent;
  color: inherit;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  vertical-align: middle;
  max-width: 100%;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  padding: 0;
  font-size: 1rem;
  font-weight: 700;
  line-height: 1.56;
  background: #3c3c3c;
  color: #8de2e0;
  -webkit-text-decoration: underline;
  text-decoration: underline;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  height: 20px;
}

.emotion-1 {
  width: 24px;
  height: 100%;
  fill: #8de2e0;
  vertical-align: middle;
  padding: 0;
}

<Select
  ariaLabel=""
  downShiftProps={
    Object {
      "itemToString": [Function],
    }
  }
  focus={true}
  growMenu={true}
  height="20px"
  highlighted={true}
  inline={true}
  items={
    Array [
      Object {
        "name": "name:apple",
        "value": "value:apple",
      },
      Object {
        "name": "name:orange",
        "value": "name:orange",
      },
      Object {
        "name": "name:banana",
        "value": "name:banana",
      },
    ]
  }
  menuWidth="800px"
  onChange={[Function]}
  renderItem={[Function]}
  withPadding={true}
>
  <Downshift
    defaultHighlightedIndex={null}
    defaultIsOpen={false}
    environment={[Window]}
    getA11yStatusMessage={[Function]}
    initialSelectedItem={
      Object {
        "name": "name:apple",
        "value": "value:apple",
      }
    }
    itemToString={[Function]}
    onChange={[Function]}
    onInputValueChange={[Function]}
    onOuterClick={[Function]}
    onSelect={[Function]}
    onStateChange={[Function]}
    onUserAction={[Function]}
    scrollIntoView={[Function]}
    selectedItemChanged={[Function]}
    stateReducer={[Function]}
    suppressRefError={false}
  >
    <div
      aria-expanded={false}
      aria-haspopup="listbox"
      aria-labelledby="downshift-1-label"
      aria-owns={null}
      className="emotion-5"
      role="combobox"
    >
      <SelectOnKeyPressContainer
        downshiftProps={
          Object {
            "clearItems": [Function],
            "clearSelection": [Function],
            "closeMenu": [Function],
            "getInputProps": [Function],
            "getItemProps": [Function],
            "getLabelProps": [Function],
            "getMenuProps": [Function],
            "getRootProps": [Function],
            "getToggleButtonProps": [Function],
            "highlightedIndex": null,
            "id": "downshift-1",
            "inputValue": "name:apple",
            "isOpen": false,
            "itemToString": [Function],
            "openMenu": [Function],
            "reset": [Function],
            "selectHighlightedItem": [Function],
            "selectItem": [Function],
            "selectItemAtIndex": [Function],
            "selectedItem": Object {
              "name": "name:apple",
              "value": "value:apple",
            },
            "setHighlightedIndex": [Function],
            "setItemCount": [Function],
            "setState": [Function],
            "toggleMenu": [Function],
            "unsetItemCount": [Function],
          }
        }
        focus={false}
        itemToString={[Function]}
        items={
          Array [
            Object {
              "name": "name:apple",
              "value": "value:apple",
            },
            Object {
              "name": "name:orange",
              "value": "name:orange",
            },
            Object {
              "name": "name:banana",
              "value": "name:banana",
            },
          ]
        }
      >
        <DropdownMenu
          ariaLabel=""
          downShiftProps={
            Object {
              "itemToString": [Function],
            }
          }
          downshiftProps={
            Object {
              "clearItems": [Function],
              "clearSelection": [Function],
              "closeMenu": [Function],
              "getInputProps": [Function],
              "getItemProps": [Function],
              "getLabelProps": [Function],
              "getMenuProps": [Function],
              "getRootProps": [Function],
              "getToggleButtonProps": [Function],
              "highlightedIndex": null,
              "id": "downshift-1",
              "inputValue": "name:apple",
              "isOpen": false,
              "itemToString": [Function],
              "openMenu": [Function],
              "reset": [Function],
              "selectHighlightedItem": [Function],
              "selectItem": [Function],
              "selectItemAtIndex": [Function],
              "selectedItem": Object {
                "name": "name:apple",
                "value": "value:apple",
              },
              "setHighlightedIndex": [Function],
              "setItemCount": [Function],
              "setState": [Function],
              "toggleMenu": [Function],
              "unsetItemCount": [Function],
            }
          }
          focus={true}
          growMenu={true}
          height="20px"
          highlighted={true}
          inline={true}
          items={
            Array [
              Object {
                "name": "name:apple",
                "value": "value:apple",
              },
              Object {
                "name": "name:orange",
                "value": "name:orange",
              },
              Object {
                "name": "name:banana",
                "value": "name:banana",
              },
            ]
          }
          label=""
          menuWidth="800px"
          onChange={[Function]}
          renderItem={[Function]}
          withPadding={true}
        >
          <ButtonBase
            aria-activedescendant={null}
            aria-expanded={false}
            aria-haspopup="listbox"
            aria-label=" Menu, name:apple selected"
            aria-labelledby="downshift-1-label"
            aria-owns={null}
            data-toggle={true}
            onBlur={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            overrideClassName={
              Object {
                "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "name": "mkea9t-DropdownMenu-DropdownMenu",
                "next": undefined,
                "styles": "justify-content:space-between;padding:0;font-size:1rem;font-weight:700;line-height:1.56;background:#3c3c3c;color:#8de2e0;text-decoration:underline;width:fit-content;height:20px;;;label:DropdownMenu;;label:DropdownMenu;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
                "toString": [Function],
              }
            }
            role="combobox"
            type="button"
          >
            <button
              aria-activedescendant={null}
              aria-expanded={false}
              aria-haspopup="listbox"
              aria-label=" Menu, name:apple selected"
              aria-labelledby="downshift-1-label"
              aria-owns={null}
              className="emotion-4"
              data-toggle={true}
              onBlur={[Function]}
              onClick={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              role="combobox"
              type="button"
            >
              <span
                className="emotion-0"
              >
                name:apple
              </span>
              <span
                className="emotion-1"
              >
                <ChevronDown
                  className="emotion-1"
                  height="24"
                  width="24"
                >
                  <svg
                    className="emotion-1"
                    height="24"
                    viewBox="0 0 24 24"
                    width="24"
                    xmlns="http://www.w3.org/2000/svg"
                    xmlnsXlink="http://www.w3.org/1999/xlink"
                  >
                    <defs>
                      <path
                        d="M2.12 1.29L6 5.17l3.88-3.88a.996.996 0 1 1 1.41 1.41L6.7 7.29a.996.996 0 0 1-1.41 0L.7 2.7a.996.996 0 0 1 0-1.41c.39-.38 1.03-.39 1.42 0z"
                        id="mockId"
                      />
                    </defs>
                    <g
                      fillRule="evenodd"
                      transform="translate(6 8)"
                    >
                      <mask
                        id="mockId"
                      >
                        <use
                          xlinkHref="#mockId"
                        />
                      </mask>
                      <use
                        fillRule="nonzero"
                        xlinkHref="#mockId"
                      />
                      <g
                        mask="url(#mockId)"
                      >
                        <path
                          d="M0 0h12v8H0z"
                        />
                      </g>
                    </g>
                  </svg>
                </ChevronDown>
              </span>
            </button>
          </ButtonBase>
        </DropdownMenu>
      </SelectOnKeyPressContainer>
    </div>
  </Downshift>
</Select>
`;
